{"version":3,"file":"dap.esm.js","sources":["../node_modules/rollup-plugin-node-builtins/src/es6/events.js","../src/processor/enums.ts","../src/proxy/cmsis-dap.ts","../src/daplink/text-decoder.ts","../src/daplink/index.ts","../src/dap/adi.ts","../src/processor/cortex-m.ts","../src/transport/hid.ts","../node_modules/rollup-plugin-node-builtins/src/es6/os.js","../src/transport/usb.ts","../src/transport/webusb.ts"],"sourcesContent":["'use strict';\n\nvar domain;\n\n// This constructor is used to store event handlers. Instantiating this is\n// faster than explicitly calling `Object.create(null)` to get a \"clean\" empty\n// object (tested with v8 v4.9).\nfunction EventHandlers() {}\nEventHandlers.prototype = Object.create(null);\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nexport default EventEmitter;\nexport {EventEmitter};\n\n// nodejs oddity\n// require('events') === require('events').EventEmitter\nEventEmitter.EventEmitter = EventEmitter\n\nEventEmitter.usingDomains = false;\n\nEventEmitter.prototype.domain = undefined;\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\nEventEmitter.init = function() {\n  this.domain = null;\n  if (EventEmitter.usingDomains) {\n    // if there is an active domain, then attach to it.\n    if (domain.active && !(this instanceof domain.Domain)) {\n      this.domain = domain.active;\n    }\n  }\n\n  if (!this._events || this._events === Object.getPrototypeOf(this)._events) {\n    this._events = new EventHandlers();\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || isNaN(n))\n    throw new TypeError('\"n\" argument must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nfunction $getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return $getMaxListeners(this);\n};\n\n// These standalone emit* functions are used to optimize calling of event\n// handlers for fast cases because emit() itself often has a variable number of\n// arguments and can be deoptimized because of that. These functions always have\n// the same number of arguments and thus do not get deoptimized, so the code\n// inside them can execute faster.\nfunction emitNone(handler, isFn, self) {\n  if (isFn)\n    handler.call(self);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self);\n  }\n}\nfunction emitOne(handler, isFn, self, arg1) {\n  if (isFn)\n    handler.call(self, arg1);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1);\n  }\n}\nfunction emitTwo(handler, isFn, self, arg1, arg2) {\n  if (isFn)\n    handler.call(self, arg1, arg2);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1, arg2);\n  }\n}\nfunction emitThree(handler, isFn, self, arg1, arg2, arg3) {\n  if (isFn)\n    handler.call(self, arg1, arg2, arg3);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1, arg2, arg3);\n  }\n}\n\nfunction emitMany(handler, isFn, self, args) {\n  if (isFn)\n    handler.apply(self, args);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].apply(self, args);\n  }\n}\n\nEventEmitter.prototype.emit = function emit(type) {\n  var er, handler, len, args, i, events, domain;\n  var needDomainExit = false;\n  var doError = (type === 'error');\n\n  events = this._events;\n  if (events)\n    doError = (doError && events.error == null);\n  else if (!doError)\n    return false;\n\n  domain = this.domain;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    er = arguments[1];\n    if (domain) {\n      if (!er)\n        er = new Error('Uncaught, unspecified \"error\" event');\n      er.domainEmitter = this;\n      er.domain = domain;\n      er.domainThrown = false;\n      domain.emit('error', er);\n    } else if (er instanceof Error) {\n      throw er; // Unhandled 'error' event\n    } else {\n      // At least give some kind of context to the user\n      var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n      err.context = er;\n      throw err;\n    }\n    return false;\n  }\n\n  handler = events[type];\n\n  if (!handler)\n    return false;\n\n  var isFn = typeof handler === 'function';\n  len = arguments.length;\n  switch (len) {\n    // fast cases\n    case 1:\n      emitNone(handler, isFn, this);\n      break;\n    case 2:\n      emitOne(handler, isFn, this, arguments[1]);\n      break;\n    case 3:\n      emitTwo(handler, isFn, this, arguments[1], arguments[2]);\n      break;\n    case 4:\n      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);\n      break;\n    // slower\n    default:\n      args = new Array(len - 1);\n      for (i = 1; i < len; i++)\n        args[i - 1] = arguments[i];\n      emitMany(handler, isFn, this, args);\n  }\n\n  if (needDomainExit)\n    domain.exit();\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  if (typeof listener !== 'function')\n    throw new TypeError('\"listener\" argument must be a function');\n\n  events = target._events;\n  if (!events) {\n    events = target._events = new EventHandlers();\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (!existing) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] = prepend ? [listener, existing] :\n                                          [existing, listener];\n    } else {\n      // If we've already got an array, just append.\n      if (prepend) {\n        existing.unshift(listener);\n      } else {\n        existing.push(listener);\n      }\n    }\n\n    // Check for listener leak\n    if (!existing.warned) {\n      m = $getMaxListeners(target);\n      if (m && m > 0 && existing.length > m) {\n        existing.warned = true;\n        var w = new Error('Possible EventEmitter memory leak detected. ' +\n                            existing.length + ' ' + type + ' listeners added. ' +\n                            'Use emitter.setMaxListeners() to increase limit');\n        w.name = 'MaxListenersExceededWarning';\n        w.emitter = target;\n        w.type = type;\n        w.count = existing.length;\n        emitWarning(w);\n      }\n    }\n  }\n\n  return target;\n}\nfunction emitWarning(e) {\n  typeof console.warn === 'function' ? console.warn(e) : console.log(e);\n}\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction _onceWrap(target, type, listener) {\n  var fired = false;\n  function g() {\n    target.removeListener(type, g);\n    if (!fired) {\n      fired = true;\n      listener.apply(target, arguments);\n    }\n  }\n  g.listener = listener;\n  return g;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  if (typeof listener !== 'function')\n    throw new TypeError('\"listener\" argument must be a function');\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      if (typeof listener !== 'function')\n        throw new TypeError('\"listener\" argument must be a function');\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      if (typeof listener !== 'function')\n        throw new TypeError('\"listener\" argument must be a function');\n\n      events = this._events;\n      if (!events)\n        return this;\n\n      list = events[type];\n      if (!list)\n        return this;\n\n      if (list === listener || (list.listener && list.listener === listener)) {\n        if (--this._eventsCount === 0)\n          this._events = new EventHandlers();\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length; i-- > 0;) {\n          if (list[i] === listener ||\n              (list[i].listener && list[i].listener === listener)) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (list.length === 1) {\n          list[0] = undefined;\n          if (--this._eventsCount === 0) {\n            this._events = new EventHandlers();\n            return this;\n          } else {\n            delete events[type];\n          }\n        } else {\n          spliceOne(list, position);\n        }\n\n        if (events.removeListener)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events;\n\n      events = this._events;\n      if (!events)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (!events.removeListener) {\n        if (arguments.length === 0) {\n          this._events = new EventHandlers();\n          this._eventsCount = 0;\n        } else if (events[type]) {\n          if (--this._eventsCount === 0)\n            this._events = new EventHandlers();\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        for (var i = 0, key; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = new EventHandlers();\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners) {\n        // LIFO order\n        do {\n          this.removeListener(type, listeners[listeners.length - 1]);\n        } while (listeners[0]);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  var evlistener;\n  var ret;\n  var events = this._events;\n\n  if (!events)\n    ret = [];\n  else {\n    evlistener = events[type];\n    if (!evlistener)\n      ret = [];\n    else if (typeof evlistener === 'function')\n      ret = [evlistener.listener || evlistener];\n    else\n      ret = unwrapListeners(evlistener);\n  }\n\n  return ret;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];\n};\n\n// About 1.5x faster than the two-arg version of Array#splice().\nfunction spliceOne(list, index) {\n  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)\n    list[i] = list[k];\n  list.pop();\n}\n\nfunction arrayClone(arr, i) {\n  var copy = new Array(i);\n  while (i--)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n","/*\n* DAPjs\n* Copyright Arm Limited 2018\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n/**\n * Processor Core States\n */\nexport const enum CoreState {\n    /**\n     * The core has been reset\n     */\n    RESET,\n    /**\n     * Core is running with a lockup condition\n     */\n    LOCKUP,\n    /**\n     * The core is sleeping\n     */\n    SLEEPING,\n    /**\n     * The core is in debug state\n     */\n    DEBUG,\n    /**\n     * The core is running\n     */\n    RUNNING\n}\n\n/**\n * Processor Core Registers\n * http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.100230_0004_00_en/way1435345987733.html\n */\nexport const enum CoreRegister {\n    /**\n     * General purpose register\n     */\n    R0 = 0,\n    /**\n     * General purpose register\n     */\n    R1 = 1,\n    /**\n     * General purpose register\n     */\n    R2 = 2,\n    /**\n     * General purpose register\n     */\n    R3 = 3,\n    /**\n     * General purpose register\n     */\n    R4 = 4,\n    /**\n     * General purpose register\n     */\n    R5 = 5,\n    /**\n     * General purpose register\n     */\n    R6 = 6,\n    /**\n     * General purpose register\n     */\n    R7 = 7,\n    /**\n     * General purpose register\n     */\n    R8 = 8,\n    /**\n     * General purpose register\n     */\n    R9 = 9,\n    /**\n     * General purpose register\n     */\n    R10 = 10,\n    /**\n     * General purpose register\n     */\n    R11 = 11,\n    /**\n     * General purpose register\n     */\n    R12 = 12,\n    /**\n     * Stack Pointer\n     */\n    SP = 13,\n    /**\n     * The Link Register\n     */\n    LR = 14,\n    /**\n     * The Program Counter\n     */\n    PC = 15,\n    /**\n     * The Program Status Register\n     */\n    PSR = 16,\n    /**\n     * Main Stack Pointer\n     */\n    MSP = 17,\n    /**\n     * Process Stack Pointer\n     */\n    PSP = 18,\n    /**\n     * Prevents activation of exceptions\n     */\n    PRIMASK = 20,\n    /**\n     * Controls the stack used\n     */\n    CONTROL = 20\n}\n\n/**\n * Debug Registers\n * http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.100165_0201_00_en/ric1417175947147.html\n */\nexport const enum DebugRegister {\n    /**\n     * Debug Fault Status Register\n     */\n    DFSR = 0xE000ED30,\n    /**\n     * Debug Halting Control and Status Register\n     */\n    DHCSR = 0xE000EDF0,\n    /**\n     * Debug Core Register Selector Register, write only\n     */\n    DCRSR = 0xE000EDF4,\n    /**\n     * Debug Core Register Data Register\n     */\n    DCRDR = 0xE000EDF8,\n    /**\n     * Debug Exception and Monitor Control Register\n     */\n    DEMCR = 0xE000EDFC\n}\n\n/**\n * Debug Halting Control and Status Register\n * http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.ddi0337e/CEGCJAHJ.html\n * @hidden\n */\nexport const enum DhcsrMask {\n    /**\n     * Enables debug\n     */\n    C_DEBUGEN = (1 << 0),\n    /**\n     * Halts the core\n     */\n    C_HALT = (1 << 1),\n    /**\n     * Steps the core in halted debug\n     */\n    C_STEP = (1 << 2),\n    /**\n     * Mask interrupts when stepping or running in halted debug\n     */\n    C_MASKINTS = (1 << 3),\n    /**\n     * Enables Halting debug to gain control\n     */\n    C_SNAPSTALL = (1 << 5),\n    /**\n     * Register Read/Write on the Debug Core Register Selector register is available\n     */\n    S_REGRDY = (1 << 16),\n    /**\n     * The core is in debug state\n     */\n    S_HALT = (1 << 17),\n    /**\n     * Indicates that the core is sleeping\n     */\n    S_SLEEP = (1 << 18),\n    /**\n     * Core is running (not halted) and a lockup condition is present\n     */\n    S_LOCKUP = (1 << 19),\n    /**\n     * An instruction has completed since last read\n     */\n    S_RETIRE_ST = (1 << 24),\n    /**\n     * The core has been reset\n     */\n    S_RESET_ST = (1 << 25),\n    /**\n     * Debug Key\n     */\n    DBGKEY = (0xA05F << 16)\n}\n\n/**\n * Debug Fault Status Register Mask\n * http://infocenter.arm.com/help/topic/com.arm.doc.ddi0413d/Cihdifbf.html\n * @hidden\n */\nexport const enum DfsrMask {\n    /**\n     * Halt request flag\n     */\n    HALTED = (1 << 0),\n    /**\n     * BKPT instruction or hardware breakpoint match\n     */\n    BKPT = (1 << 1),\n    /**\n     * Data Watchpoint (DW) flag\n     */\n    DWTTRAP = (1 << 2),\n    /**\n     * Vector catch occurred\n     */\n    VCATCH = (1 << 3),\n    /**\n     * External debug request (EDBGRQ) has halted the core\n     */\n    EXTERNAL = (1 << 4)\n}\n\n/**\n * Debug Core Register Selector Register Mask\n * http://infocenter.arm.com/help/topic/com.arm.doc.ddi0337e/CEGIAJBH.html\n * @hidden\n */\nexport const enum DcrsrMask {\n    /**\n     * Register write or read, write is 1\n     */\n    REGWnR = (1 << 16),\n    /**\n     * Register select - DebugReturnAddress & PSR/Flags, Execution Number, and state information\n     */\n    REGSEL = 0x1F,\n}\n\n/**\n * Flash Patch and Breakpoint Registers\n * http://infocenter.arm.com/help/topic/com.arm.doc.100165_0201_00_en/ric1417175949176.html\n * @hidden\n */\nexport const enum FPBRegister {\n    /**\n     * FlashPatch Control Register\n     */\n    FP_CTRL = 0xE0002000,\n    /**\n     * FlashPatch Remap Register\n     */\n    FP_REMAP = 0xE0002004,\n    /**\n     * FlashPatch Comparator Register0\n     */\n    FP_COMP0 = 0xE0002008,\n    /**\n     * FlashPatch Comparator Register1\n     */\n    FP_COMP1 = 0xE000200C,\n    /**\n     * FlashPatch Comparator Register2\n     */\n    FP_COMP2 = 0xE0002010,\n    /**\n     * FlashPatch Comparator Register3\n     */\n    FP_COMP3 = 0xE0002014,\n    /**\n     * FlashPatch Comparator Register4\n     */\n    FP_COMP4 = 0xE0002018,\n    /**\n     * FlashPatch Comparator Register5\n     */\n    FP_COMP5 = 0xE000201C,\n    /**\n     * FlashPatch Comparator Register6\n     */\n    FP_COMP6 = 0xE0002020,\n    /**\n     * FlashPatch Comparator Register7\n     */\n    FP_COMP7 = 0xE0002024,\n}\n\n/**\n * Flash Patch and Breakpoint Control Register Mask\n * http://infocenter.arm.com/help/topic/com.arm.doc.ddi0337e/ch11s04s01.html#BABCAFAG\n * @hidden\n */\nexport enum FPBCtrlMask {\n    /**\n     * Flash patch unit enable\n     */\n    ENABLE = (1 << 0),\n    /**\n     * Key field which enables writing to the Flash Patch Control Register\n     */\n    KEY = (1 << 1)\n}\n","/*\n* DAPjs\n* Copyright Arm Limited 2018\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { EventEmitter } from \"events\";\nimport { Transport } from \"../transport\";\nimport {\n    DAPPort,\n    DAPTransferMode,\n    DAPProtocol,\n    DAPCommand,\n    DAPConnectResponse,\n    DAPResponse,\n    DAPInfoRequest,\n    DAPResetTargeResponse,\n    DAPTransferResponse\n} from \"./enums\";\nimport { Proxy, DAPOperation } from \"./\";\n\n/**\n * @hidden\n */\nexport const DEFAULT_CLOCK_FREQUENCY = 10000000;\n/**\n * @hidden\n */\nconst SWD_SEQUENCE = 0xE79E;\n/**\n * @hidden\n */\nconst JTAG_SEQUENCE = 0xE73C;\n\n/**\n * @hidden\n */\nconst BLOCK_HEADER_SIZE = 4;\n/**\n * @hidden\n */\nconst TRANSFER_HEADER_SIZE = 2;\n/**\n * @hidden\n */\nconst TRANSFER_OPERATION_SIZE = 5;\n\n/**\n * CMSIS-DAP class\n * https://www.keil.com/pack/doc/CMSIS/DAP/html/group__DAP__Commands__gr.html\n */\nexport class CmsisDAP extends EventEmitter implements Proxy {\n\n    /**\n     * Whether the device has been opened\n     */\n    public connected = false;\n\n    /**\n     * The maximum DAPOperations which can be transferred\n     */\n    public operationCount: number;\n\n    /**\n     * The maximum block size which can be transferred\n     */\n    public blockSize: number;\n\n    /**\n     * CMSIS-DAP constructor\n     * @param transport Debug transport to use\n     * @param mode Debug mode to use\n     * @param clockFrequency Communication clock frequency to use (default 10000000)\n     */\n    constructor(private transport: Transport, private mode: DAPProtocol = DAPProtocol.DEFAULT, private clockFrequency: number = DEFAULT_CLOCK_FREQUENCY) {\n        super();\n\n        // Determine the block size\n        this.blockSize = this.transport.packetSize - BLOCK_HEADER_SIZE - 1; // -1 for the DAP_TRANSFER_BLOCK command\n\n        // Determine the operation count possible\n        const operationSpace = this.transport.packetSize - TRANSFER_HEADER_SIZE - 1; // -1 for the DAP_TRANSFER command\n        this.operationCount = Math.floor(operationSpace / TRANSFER_OPERATION_SIZE);\n    }\n\n    private delay(timeout: number): Promise<void> {\n        return new Promise((resolve, _reject) => {\n            setTimeout(resolve, timeout);\n        });\n    }\n\n    private bufferSourceToUint8Array(prefix: number, data?: BufferSource): Uint8Array {\n\n        if (!data) {\n            return new Uint8Array([prefix]);\n        }\n\n        function isView(source: ArrayBuffer | ArrayBufferView): source is ArrayBufferView {\n            return (source as ArrayBufferView).buffer !== undefined;\n        }\n\n        const arrayBuffer = isView(data) ? data.buffer : data;\n        const result = new Uint8Array(arrayBuffer.byteLength + 1);\n\n        result.set([prefix]);\n        result.set(new Uint8Array(arrayBuffer), 1);\n\n        return result;\n    }\n\n    /**\n     * Switches the CMSIS-DAP unit to use SWD\n     * http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.ddi0316d/Chdhfbhc.html\n     */\n    protected selectProtocol(protocol: DAPProtocol): Promise<void> {\n        const sequence = protocol === DAPProtocol.JTAG ? JTAG_SEQUENCE : SWD_SEQUENCE;\n\n        return this.swjSequence(new Uint8Array([0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF])) // Sequence of 1's\n        .then(() => this.swjSequence(new Uint16Array([sequence]))) // Send protocol sequence\n        .then(() => this.swjSequence(new Uint8Array([0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]))) // Sequence of 1's\n        .then(() => this.swjSequence(new Uint8Array([0x00])));\n    }\n\n    /**\n     * Send a command\n     * @param command Command to send\n     * @param data Data to use\n     * @returns Promise of DataView\n     */\n    protected send(command: number, data?: BufferSource): Promise<DataView> {\n        const array = this.bufferSourceToUint8Array(command, data);\n\n        return this.transport.write(array)\n        .then(() => this.transport.read())\n        .then(response => {\n            if (response.getUint8(0) !== command) {\n                throw new Error(`Bad response for ${command} -> ${response.getUint8(0)}`);\n            }\n\n            switch (command) {\n                case DAPCommand.DAP_DISCONNECT:\n                case DAPCommand.DAP_WRITE_ABORT:\n                case DAPCommand.DAP_DELAY:\n                case DAPCommand.DAP_RESET_TARGET:\n                case DAPCommand.DAP_SWJ_CLOCK:\n                case DAPCommand.DAP_SWJ_SEQUENCE:\n                case DAPCommand.DAP_SWD_CONFIGURE:\n                case DAPCommand.DAP_SWD_SEQUENCE:\n                case DAPCommand.DAP_SWO_TRANSPORT:\n                case DAPCommand.DAP_SWO_MODE:\n                case DAPCommand.DAP_SWO_CONTROL:\n                case DAPCommand.DAP_JTAG_CONFIGURE:\n                case DAPCommand.DAP_JTAG_ID_CODE:\n                case DAPCommand.DAP_TRANSFER_CONFIGURE:\n                    if (response.getUint8(1) !== DAPResponse.DAP_OK) {\n                        throw new Error(`Bad status for ${command} -> ${response.getUint8(1)}`);\n                    }\n            }\n\n            return response;\n        });\n    }\n\n    /**\n     * Get DAP information\n     * @param request Type of information to get\n     * @returns Promise of number or string\n     */\n    public dapInfo(request: DAPInfoRequest): Promise<number | string> {\n        return this.send(DAPCommand.DAP_INFO, new Uint8Array([request]))\n        .then(result => {\n            const length = result.getUint8(1);\n\n            if (length === 0) {\n                throw new Error(\"DAP Info Failure\");\n            }\n\n            switch (request) {\n                case DAPInfoRequest.CAPABILITIES:\n                case DAPInfoRequest.PACKET_COUNT:\n                case DAPInfoRequest.PACKET_SIZE:\n                case DAPInfoRequest.SWO_TRACE_BUFFER_SIZE:\n                    // Byte\n                    if (length === 1) return result.getUint8(2);\n\n                    // Short\n                    if (length === 2) return result.getUint16(2);\n\n                    // Word\n                    if (length === 4) return result.getUint32(2);\n            }\n\n            const ascii = Array.prototype.slice.call(new Uint8Array(result.buffer, 2, length));\n            return String.fromCharCode.apply(null, ascii);\n        });\n    }\n\n    /**\n     * Send an SWJ Sequence\n     * https://www.keil.com/pack/doc/CMSIS/DAP/html/group__DAP__SWJ__Sequence.html\n     * @param sequence The sequence to send\n     * @returns Promise\n     */\n    public swjSequence(sequence: BufferSource): Promise<void> {\n        const bitLength = sequence.byteLength * 8;\n        const data = this.bufferSourceToUint8Array(bitLength, sequence);\n\n        return this.send(DAPCommand.DAP_SWJ_SEQUENCE, data)\n        .then(() => undefined);\n    }\n\n    /**\n     * Configure Transfer\n     * https://www.keil.com/pack/doc/CMSIS/DAP/html/group__DAP__TransferConfigure.html\n     * @param idleCycles Number of extra idle cycles after each transfer\n     * @param waitRetry Number of transfer retries after WAIT response\n     * @param matchRetry Number of retries on reads with Value Match in DAP_Transfer\n     * @returns Promise\n     */\n    public configureTransfer(idleCycles: number, waitRetry: number, matchRetry: number): Promise<void> {\n        const data = new Uint8Array(5);\n        const view = new DataView(data.buffer);\n\n        view.setUint8(0, idleCycles);\n        view.setUint16(1, waitRetry, true);\n        view.setUint16(3, matchRetry, true);\n\n        return this.send(DAPCommand.DAP_TRANSFER_CONFIGURE, data)\n        .then(() => undefined);\n    }\n\n    /**\n     * Connect to target device\n     * @returns Promise\n     */\n    public connect(): Promise<void> {\n        if (this.connected === true) {\n            return Promise.resolve();\n        }\n\n        return this.transport.open()\n        .then(() => this.send(DAPCommand.DAP_SWJ_CLOCK, new Uint32Array([this.clockFrequency])))\n        .then(() => this.send(DAPCommand.DAP_CONNECT, new Uint8Array([this.mode])))\n        .then(result => {\n            if (result.getUint8(1) === DAPConnectResponse.FAILED || this.mode !== DAPProtocol.DEFAULT && result.getUint8(1) !== this.mode) {\n                throw new Error(\"Mode not enabled.\");\n            }\n        })\n        .then(() => this.configureTransfer(0, 100, 0))\n        .then(() => this.selectProtocol(DAPProtocol.SWD))\n        .then(() => {\n            this.connected = true;\n        });\n    }\n\n    /**\n     * Disconnect from target device\n     * @returns Promise\n     */\n    public disconnect(): Promise<void> {\n        if (this.connected === false) {\n            return Promise.resolve();\n        }\n\n        return this.send(DAPCommand.DAP_DISCONNECT)\n        .then(() => this.transport.close())\n        .then(() => {\n            this.connected = false;\n        });\n    }\n\n    /**\n     * Reconnect to target device\n     * @returns Promise\n     */\n    public reconnect(): Promise<void> {\n        return this.disconnect()\n        .then(() => this.delay(100))\n        .then(() => this.connect());\n    }\n\n    /**\n     * Reset target device\n     * @returns Promise of whether a device specific reset sequence is implemented\n     */\n    public reset(): Promise<boolean> {\n        return this.send(DAPCommand.DAP_RESET_TARGET)\n        .then(response => response.getUint8(2) === DAPResetTargeResponse.RESET_SEQUENCE);\n    }\n\n    /**\n     * Transfer data with a single read or write operation\n     * @param port Port type (debug port or access port)\n     * @param mode Whether to read or write\n     * @param register The register to use\n     * @param value Any value to write\n     * @returns Promise of any value read\n     */\n    public transfer(port: DAPPort, mode: DAPTransferMode, register: number, value?: number): Promise<number>;\n    /**\n     * Transfer data with multiple read or write operations\n     * @param operations The operations to use\n     * @returns Promise of any values read\n     */\n    public transfer(operations: DAPOperation[]): Promise<Uint32Array>;\n    public transfer(portOrOps: DAPPort | DAPOperation[], mode: DAPTransferMode = DAPTransferMode.READ, register: number = 0, value: number = 0): Promise<number | Uint32Array> {\n\n        let operations: DAPOperation[];\n\n        if (typeof portOrOps === \"number\") {\n            operations = [{\n                port: portOrOps,\n                mode,\n                register,\n                value\n            }];\n        } else {\n            operations = portOrOps;\n        }\n\n        const data = new Uint8Array(TRANSFER_HEADER_SIZE + (operations.length * TRANSFER_OPERATION_SIZE));\n        const view = new DataView(data.buffer);\n\n        // DAP Index, ignored for SWD\n        view.setUint8(0, 0);\n        // Transfer count\n        view.setUint8(1, operations.length);\n\n        operations.forEach((operation, index) => {\n            const offset = TRANSFER_HEADER_SIZE + (index * TRANSFER_OPERATION_SIZE);\n\n            // Transfer request\n            view.setUint8(offset, operation.port | operation.mode | operation.register);\n            // Transfer data\n            view.setUint32(offset + 1, operation.value || 0, true);\n        });\n\n        return this.send(DAPCommand.DAP_TRANSFER, data)\n        .then(result => {\n\n            // Transfer count\n            if (result.getUint8(1) !== operations.length) {\n                throw new Error(\"Transfer count mismatch\");\n            }\n\n            // Transfer response\n            const response = result.getUint8(2);\n            if (response === DAPTransferResponse.WAIT) {\n                throw new Error(\"Transfer response WAIT\");\n            }\n            if (response === DAPTransferResponse.FAULT) {\n                throw new Error(\"Transfer response FAULT\");\n            }\n            if (response === DAPTransferResponse.PROTOCOL_ERROR) {\n                throw new Error(\"Transfer response PROTOCOL_ERROR\");\n            }\n            if (response === DAPTransferResponse.VALUE_MISMATCH) {\n                throw new Error(\"Transfer response VALUE_MISMATCH\");\n            }\n            if (response === DAPTransferResponse.NO_ACK) {\n                throw new Error(\"Transfer response NO_ACK\");\n            }\n\n            if (typeof portOrOps === \"number\") {\n                return result.getUint32(3, true);\n            }\n\n            const length = operations.length * 4;\n            return new Uint32Array(result.buffer.slice(3, 3 + length));\n        });\n    }\n\n    /**\n     * Read a block of data from a single register\n     * @param port Port type (debug port or access port)\n     * @param register The register to use\n     * @returns Promise of values read\n     */\n    public transferBlock(port: DAPPort, register: number, count: number): Promise<Uint32Array>;\n    /**\n     * Write a block of data to a single register\n     * @param port Port type (debug port or access port)\n     * @param register The register to use\n     * @param values The values to write\n     * @returns Promise\n     */\n    public transferBlock(port: DAPPort, register: number, values: Uint32Array): Promise<undefined>;\n    public transferBlock(port: DAPPort, register: number, countOrValues: number | Uint32Array): Promise<Uint32Array | undefined> {\n\n        let operationCount: number;\n        let mode: DAPTransferMode;\n        let dataSize = BLOCK_HEADER_SIZE;\n\n        if (typeof countOrValues === \"number\") {\n            operationCount = countOrValues;\n            mode = DAPTransferMode.READ;\n        } else {\n            operationCount = countOrValues.length;\n            mode = DAPTransferMode.WRITE;\n            dataSize += countOrValues.byteLength;\n        }\n\n        const data = new Uint8Array(dataSize);\n        const view = new DataView(data.buffer);\n\n        // DAP Index, ignored for SWD\n        view.setUint8(0, 0);\n        // Transfer count\n        view.setUint16(1, operationCount, true);\n        // Transfer request\n        view.setUint8(3, port | mode | register);\n\n        if (typeof countOrValues !== \"number\") {\n            // Transfer data\n            data.set(countOrValues, BLOCK_HEADER_SIZE);\n        }\n\n        return this.send(DAPCommand.DAP_TRANSFER_BLOCK, view)\n        .then(result => {\n\n            // Transfer count\n            if (result.getUint16(1, true) !== operationCount) {\n                throw new Error(\"Transfer count mismatch\");\n            }\n\n            // Transfer response\n            const response = result.getUint8(3);\n            if (response & DAPTransferResponse.WAIT) {\n                throw new Error(\"Transfer response WAIT\");\n            }\n            if (response & DAPTransferResponse.FAULT) {\n                throw new Error(\"Transfer response FAULT\");\n            }\n            if (response & DAPTransferResponse.PROTOCOL_ERROR) {\n                throw new Error(\"Transfer response PROTOCOL_ERROR\");\n            }\n            if (response & DAPTransferResponse.NO_ACK) {\n                throw new Error(\"Transfer response NO_ACK\");\n            }\n\n            if (typeof countOrValues === \"number\") {\n                return new Uint32Array(result.buffer.slice(4));\n            }\n\n            return undefined;\n        });\n    }\n}\n","/*\n* DAPjs\n* Copyright Arm Limited 2020\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n// https://github.com/anonyco/FastestSmallestTextEncoderDecoder\n\nconst PARTIAL_CHAR_TEST = /[\\xc0-\\xff][\\x80-\\xbf]*$/g;\nconst DOUBLE_BYTE_REPLACE = /[\\xc0-\\xff][\\x80-\\xbf]*/g;\n\nexport class TextDecoder {\n\n    private partialChar: string | undefined;\n\n    /**\n     * Decode an ArrayBuffer to a string, handling double-byte characters\n     * @param input The ArrayBuffer to decode\n     */\n    public decode(input: ArrayBuffer): string {\n\n        const numberArray = Array.prototype.slice.call(new Uint8Array(input));\n        let data = String.fromCodePoint.apply(undefined, numberArray);\n\n        if (this.partialChar) {\n            // Previous double-byte character was cut off\n            data = `${this.partialChar}${data}`;\n            this.partialChar = undefined;\n        }\n\n        const match = data.match(PARTIAL_CHAR_TEST);\n        if (match) {\n            // Partial double-byte character at end of string, save it and truncate data\n            const length = match[0].length;\n            this.partialChar = data.slice(-length);\n            data = data.slice(0, -length);\n        }\n\n        return data.replace(DOUBLE_BYTE_REPLACE, this.decoderReplacer);\n    }\n\n    private decoderReplacer(encoded: string): string {\n        let codePoint = encoded.codePointAt(0)! << 24;\n        const leadingOnes = Math.clz32(~codePoint);\n        let endPos = 0;\n        const stringLen = encoded.length;\n        let result = \"\";\n        if (leadingOnes < 5 && stringLen >= leadingOnes) {\n            codePoint = (codePoint << leadingOnes) >>> (24 + leadingOnes);\n            for (endPos = 1; endPos < leadingOnes; endPos = endPos + 1) {\n                codePoint = (codePoint << 6) | (encoded.codePointAt(endPos)! & 0x3f);\n            }\n            if (codePoint <= 0xFFFF) { // BMP code point\n                result += String.fromCodePoint(codePoint);\n            } else if (codePoint <= 0x10FFFF) {\n                // https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n                codePoint = codePoint - 0x10000;\n                result += String.fromCodePoint(\n                    (codePoint >> 10) + 0xD800,  // highSurrogate\n                    (codePoint & 0x3ff) + 0xDC00 // lowSurrogate\n                );\n            } else endPos = 0; // to fill it in with INVALIDs\n        }\n        for (; endPos < stringLen; endPos = endPos + 1) {\n            result += \"\\ufffd\"; // replacement character\n        }\n        return result;\n    }\n}\n","/*\n* DAPjs\n* Copyright Arm Limited 2018\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { TextDecoder } from \"./text-decoder\";\nimport { CmsisDAP, DAPProtocol, DEFAULT_CLOCK_FREQUENCY } from \"../proxy\";\nimport { Transport } from \"../transport\";\nimport { DAPLinkFlash, DAPLinkSerial } from \"./enums\";\n\n/**\n * @hidden\n */\nconst DEFAULT_BAUDRATE = 9600;\n/**\n * @hidden\n */\nconst DEFAULT_SERIAL_DELAY = 100;\n/**\n * @hidden\n */\nconst DEFAULT_PAGE_SIZE = 62;\n\n/**\n * @hidden\n */\nconst decoder = new TextDecoder();\n\n/**\n * DAPLink Class\n */\nexport class DAPLink extends CmsisDAP {\n\n    /**\n     * Progress event\n     * @event\n     */\n    public static EVENT_PROGRESS: string = \"progress\";\n\n    /**\n     * Serial read event\n     * @event\n     */\n    public static EVENT_SERIAL_DATA: string = \"serial\";\n\n    /**\n     * @hidden\n     */\n    protected serialPolling = false;\n\n    /**\n     * @hidden\n     */\n    protected serialListeners = false;\n\n    /**\n     * DAPLink constructor\n     * @param transport Debug transport to use\n     * @param mode Debug mode to use\n     * @param clockFrequency Communication clock frequency to use (default 10000000)\n     */\n    constructor(transport: Transport, mode: DAPProtocol = DAPProtocol.DEFAULT, clockFrequency: number = DEFAULT_CLOCK_FREQUENCY) {\n        super(transport, mode, clockFrequency);\n\n        this.on(\"newListener\", async event => {\n            if (event === DAPLink.EVENT_SERIAL_DATA) {\n                const listenerCount = this.listenerCount(event);\n\n                if (listenerCount === 0) {\n                    this.serialListeners = true;\n                }\n            }\n        });\n\n        this.on(\"removeListener\", event => {\n            if (event === DAPLink.EVENT_SERIAL_DATA) {\n                const listenerCount = this.listenerCount(event);\n\n                if (listenerCount === 0) {\n                    this.serialListeners = false;\n                }\n            }\n        });\n    }\n\n    /**\n     * Detect if buffer contains text or binary data\n     */\n    private isBufferBinary(buffer: ArrayBuffer): boolean {\n        const numberArray = Array.prototype.slice.call(new Uint16Array(buffer, 0, 50));\n        const bufferString: string = String.fromCharCode.apply(null, numberArray);\n\n        for (let i = 0; i < bufferString.length; i++) {\n            const charCode = bufferString.charCodeAt(i);\n            // 65533 is a code for unknown character\n            // 0-8 are codes for control characters\n            if (charCode === 65533 || charCode <= 8) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private writeBuffer(buffer: ArrayBuffer, pageSize: number, offset: number = 0): Promise<void> {\n        const end = Math.min(buffer.byteLength, offset + pageSize);\n        const page = buffer.slice(offset, end);\n        const data = new Uint8Array(page.byteLength + 1);\n\n        data.set([page.byteLength]);\n        data.set(new Uint8Array(page), 1);\n\n        return this.send(DAPLinkFlash.WRITE, data)\n        .then(() => {\n            this.emit(DAPLink.EVENT_PROGRESS, offset / buffer.byteLength);\n            if (end < buffer.byteLength) {\n                return this.writeBuffer(buffer, pageSize, end);\n            }\n            return Promise.resolve();\n        });\n    }\n\n    /**\n     * Flash the target\n     * @param buffer The image to flash\n     * @param pageSize The page size to use (defaults to 62)\n     * @returns Promise\n     */\n    public flash(buffer: BufferSource, pageSize: number = DEFAULT_PAGE_SIZE): Promise<void> {\n        function isView(source: ArrayBuffer | ArrayBufferView): source is ArrayBufferView {\n            return (source as ArrayBufferView).buffer !== undefined;\n        }\n\n        const arrayBuffer = isView(buffer) ? buffer.buffer : buffer;\n        const streamType = this.isBufferBinary(arrayBuffer) ? 0 : 1;\n\n        return this.send(DAPLinkFlash.OPEN, new Uint32Array([streamType]))\n        .then(result => {\n            // An error occurred\n            if (result.getUint8(1) !== 0) return Promise.reject(\"Flash error\");\n            return this.writeBuffer(arrayBuffer, pageSize);\n        })\n        .then(() => {\n            this.emit(DAPLink.EVENT_PROGRESS, 1.0);\n            return this.send(DAPLinkFlash.CLOSE);\n        })\n        .then(result => {\n            // An error occurred\n            if (result.getUint8(1) !== 0) return Promise.reject(\"Flash error\");\n            return this.send(DAPLinkFlash.RESET);\n        })\n        .then(() => undefined);\n    }\n\n    /**\n     * Get the serial baud rate setting\n     * @returns Promise of baud rate\n     */\n    public getSerialBaudrate(): Promise<number> {\n        return this.send(DAPLinkSerial.READ_SETTINGS)\n        .then(result => {\n            return result.getUint32(1, true);\n        });\n    }\n\n    /**\n     * Set the serial baud rate setting\n     * @param baudrate The baudrate to use (defaults to 9600)\n     * @returns Promise\n     */\n    public setSerialBaudrate(baudrate: number = DEFAULT_BAUDRATE): Promise<void> {\n        return this.send(DAPLinkSerial.WRITE_SETTINGS, new Uint32Array([baudrate]))\n        .then(() => undefined);\n    }\n\n    /**\n     * Write serial data\n     * @param data The data to write\n     * @returns Promise\n     */\n    public serialWrite(data: string): Promise<void> {\n        const arrayData = data.split(\"\").map((e: string) => e.charCodeAt(0));\n        arrayData.unshift(arrayData.length);\n        return this.send(DAPLinkSerial.WRITE, new Uint8Array(arrayData).buffer)\n        .then(() => undefined);\n    }\n\n    /**\n     * Read serial data\n     * @returns Promise of any arrayBuffer read\n     */\n    public serialRead(): Promise<ArrayBuffer | undefined> {\n        return this.send(DAPLinkSerial.READ)\n        .then(serialData => {\n            // Check if there is any data returned from the device\n            if (serialData.byteLength === 0) {\n                return undefined;\n            }\n\n            // First byte contains the vendor code\n            if (serialData.getUint8(0) !== DAPLinkSerial.READ) {\n                return undefined;\n            }\n\n            // Second byte contains the actual length of data read from the device\n            const dataLength = serialData.getUint8(1);\n            if (dataLength === 0) {\n                return undefined;\n            }\n\n            const offset = 2;\n            return serialData.buffer.slice(offset, offset + dataLength);\n        });\n    }\n\n    /**\n     * Start listening for serial data\n     * @param serialDelay The serial delay to use (default 100)\n     * @param autoConnect whether to automatically connect to the target (default true)\n     */\n    public async startSerialRead(serialDelay: number = DEFAULT_SERIAL_DELAY, autoConnect = true) {\n        this.serialPolling = true;\n\n        while (this.serialPolling) {\n\n            // Don't read serial output unless we have event listeners\n            if (this.serialListeners) {\n\n                // Remember connection state\n                const connectedState = this.connected;\n\n                if (this.connected === false && autoConnect === true) {\n                    await this.connect();\n                }\n\n                const serialData = await this.serialRead();\n\n                // Put state back\n                if (connectedState === false && autoConnect === true) {\n                    await this.disconnect();\n                }\n\n                if (serialData !== undefined) {\n                    const data = decoder.decode(serialData);\n                    this.emit(DAPLink.EVENT_SERIAL_DATA, data);\n                }\n            }\n\n            await new Promise(resolve => setTimeout(() => resolve(), serialDelay));\n        }\n    }\n\n    /**\n     * Stop listening for serial data\n     */\n    public stopSerialRead() {\n        this.serialPolling = false;\n    }\n}\n\nexport * from \"./enums\";\n","/*\n* DAPjs\n* Copyright Arm Limited 2018\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { Transport } from \"../transport\";\nimport { Proxy, CmsisDAP, DAPOperation } from \"../proxy\";\nimport { DPRegister, APRegister, CSWMask, BankSelectMask, AbortMask, CtrlStatMask } from \"./enums\";\nimport { DAP } from \"./\";\nimport { DAPTransferMode, DAPPort, DAPProtocol } from \"../proxy/enums\";\nimport { DEFAULT_CLOCK_FREQUENCY } from \"../proxy/cmsis-dap\";\n\n/**\n * Arm Debug Interface class\n */\nexport class ADI implements DAP {\n\n    private selectedAddress?: number;\n    private cswValue?: number;\n    private proxy: Proxy;\n\n    /**\n     * ADI constructor\n     * @param transport Debug transport to use\n     * @param mode Debug mode to use (default 0)\n     * @param clockFrequency Communication clock frequency to use (default 10000000)\n     */\n    constructor(transport: Transport, mode?: DAPProtocol, clockFrequency?: number);\n    /**\n     * ADI constructor\n     * @param proxy Proxy to use\n     */\n    constructor(proxy: Proxy);\n    constructor(transportOrDap: Transport | Proxy, mode: DAPProtocol = DAPProtocol.DEFAULT, clockFrequency: number = DEFAULT_CLOCK_FREQUENCY) {\n        function isTransport(test: Transport | Proxy): test is Transport {\n            return (test as Transport).open !== undefined;\n        }\n        this.proxy = isTransport(transportOrDap) ? new CmsisDAP(transportOrDap, mode, clockFrequency) : transportOrDap;\n    }\n\n    protected delay(timeout: number): Promise<void> {\n        return new Promise((resolve, _reject) => {\n            setTimeout(resolve, timeout);\n        });\n    }\n\n    /**\n     * Continually run a function until it returns true\n     * @param fn The function to run\n     * @param timer The milliseconds to wait between each run\n     * @param timeout Optional timeout to wait before giving up and rejecting\n     * @returns Promise\n     */\n    protected waitDelay(fn: () => Promise<boolean>, timer: number = 100, timeout: number = 0): Promise<void> {\n        let running: boolean = true;\n\n        const chain = (condition: boolean): Promise<void> => {\n            if (!running) return Promise.resolve();\n            return condition\n                ? Promise.resolve()\n                : this.delay(timer)\n                .then(fn)\n                .then(chain);\n        };\n\n        return new Promise((resolve, reject) => {\n            if (timeout > 0) {\n                setTimeout(() => {\n                    running = false;\n                    reject(\"Wait timed out\");\n                }, timeout);\n            }\n\n            return chain(false)\n            .then(() => resolve());\n        });\n    }\n\n    protected concatTypedArray(arrays: Uint32Array[]): Uint32Array {\n        // Only one array exists\n        if (arrays.length === 1) return arrays[0];\n\n        // Determine array length\n        let length: number = 0;\n        for (const array of arrays) {\n            length += array.length;\n        }\n\n        // Concat the arrays\n        const result = new Uint32Array(length);\n        for (let i = 0, j = 0; i < arrays.length; i++) {\n            result.set(arrays[i], j);\n            j += arrays[i].length;\n        }\n\n        return result;\n    }\n\n    protected readDPCommand(register: number): DAPOperation[] {\n        return [{\n            mode: DAPTransferMode.READ,\n            port: DAPPort.DEBUG,\n            register\n        }];\n    }\n\n    protected writeDPCommand(register: number, value: number): DAPOperation[] {\n        if (register === DPRegister.SELECT) {\n            if (value === this.selectedAddress) {\n                return [];\n            }\n            this.selectedAddress = value;\n        }\n\n        return [{\n            mode: DAPTransferMode.WRITE,\n            port: DAPPort.DEBUG,\n            register,\n            value\n        }];\n    }\n\n    protected readAPCommand(register: number): DAPOperation[] {\n        const address = (register & BankSelectMask.APSEL) | (register & BankSelectMask.APBANKSEL);\n\n        return this.writeDPCommand(DPRegister.SELECT, address).concat({\n            mode: DAPTransferMode.READ,\n            port: DAPPort.ACCESS,\n            register\n        });\n    }\n\n    protected writeAPCommand(register: number, value: number): DAPOperation[] {\n        if (register === APRegister.CSW) {\n            if (value === this.cswValue) {\n                return [];\n            }\n            this.cswValue = value;\n        }\n\n        const address = (register & BankSelectMask.APSEL) | (register & BankSelectMask.APBANKSEL);\n\n        return this.writeDPCommand(DPRegister.SELECT, address).concat({\n            mode: DAPTransferMode.WRITE,\n            port: DAPPort.ACCESS,\n            register,\n            value\n        });\n    }\n\n    protected readMem16Command(register: number): DAPOperation[] {\n        return this.writeAPCommand(APRegister.CSW, CSWMask.VALUE | CSWMask.SIZE_16)\n        .concat(this.writeAPCommand(APRegister.TAR, register))\n        .concat(this.readAPCommand(APRegister.DRW));\n    }\n\n    protected writeMem16Command(register: number, value: number): DAPOperation[] {\n        return this.writeAPCommand(APRegister.CSW, CSWMask.VALUE | CSWMask.SIZE_16)\n        .concat(this.writeAPCommand(APRegister.TAR, register))\n        .concat(this.writeAPCommand(APRegister.DRW, value));\n    }\n\n    protected readMem32Command(register: number): DAPOperation[] {\n        return this.writeAPCommand(APRegister.CSW, CSWMask.VALUE | CSWMask.SIZE_32)\n        .concat(this.writeAPCommand(APRegister.TAR, register))\n        .concat(this.readAPCommand(APRegister.DRW));\n    }\n\n    protected writeMem32Command(register: number, value: number): DAPOperation[] {\n        return this.writeAPCommand(APRegister.CSW, CSWMask.VALUE | CSWMask.SIZE_32)\n        .concat(this.writeAPCommand(APRegister.TAR, register))\n        .concat(this.writeAPCommand(APRegister.DRW, value as number));\n    }\n\n    protected transferSequence(operations: DAPOperation[][]): Promise<Uint32Array> {\n        // Flatten operations into single array\n        let merged: DAPOperation[] = [];\n        merged = merged.concat(...operations);\n\n        let chain: Promise<Uint32Array[]> = Promise.resolve([]);\n\n        // Split operations into sequences no longer than operation count\n        while (merged.length) {\n            const sequence = merged.splice(0, this.proxy.operationCount);\n            chain = chain.then(results => this.proxy.transfer(sequence).then(result => [...results, result]));\n        }\n\n        return chain\n        .then(arrays => this.concatTypedArray(arrays));\n    }\n\n    /**\n     * Connect to target device\n     * @returns Promise\n     */\n    public connect() {\n        const mask = CtrlStatMask.CDBGPWRUPACK | CtrlStatMask.CSYSPWRUPACK;\n\n        return this.proxy.connect()\n        .then(() => this.readDP(DPRegister.DPIDR))\n        .then(() => this.transferSequence([\n            this.writeDPCommand(DPRegister.ABORT, AbortMask.STKERRCLR), // clear sticky error\n            this.writeDPCommand(DPRegister.SELECT, APRegister.CSW), // select CTRL_STAT\n            this.writeDPCommand(DPRegister.CTRL_STAT, CtrlStatMask.CSYSPWRUPREQ | CtrlStatMask.CDBGPWRUPREQ)\n        ]))\n        // Wait until system and debug have powered up\n        .then(() => this.waitDelay(() => {\n            return this.readDP(DPRegister.CTRL_STAT)\n            .then(status => ((status & mask) === mask));\n        }));\n    }\n\n    /**\n     * Disconnect from target device\n     * @returns Promise\n     */\n    public disconnect(): Promise<void> {\n        return this.proxy.disconnect();\n    }\n\n    /**\n     * Reconnect to target device\n     * @returns Promise\n     */\n    public reconnect(): Promise<void> {\n        return this.disconnect()\n        .then(() => this.delay(100))\n        .then(() => this.connect());\n    }\n\n    /**\n     * Reset target device\n     * @returns Promise\n     */\n    public reset(): Promise<boolean> {\n        return this.proxy.reset();\n    }\n\n    /**\n     * Read from a debug port register\n     * @param register DP register to read\n     * @returns Promise of register value\n     */\n    public readDP(register: DPRegister): Promise<number> {\n        return this.proxy.transfer(this.readDPCommand(register))\n        .then(result => result[0]);\n    }\n\n    /**\n     * Write to a debug port register\n     * @param register DP register to write\n     * @param value Value to write\n     * @returns Promise\n     */\n    public writeDP(register: DPRegister, value: number): Promise<void> {\n        return this.proxy.transfer(this.writeDPCommand(register, value))\n        .then(() => undefined);\n    }\n\n    /**\n     * Read from an access port register\n     * @param register AP register to read\n     * @returns Promise of register value\n     */\n    public readAP(register: APRegister): Promise<number> {\n        return this.proxy.transfer(this.readAPCommand(register))\n        .then(result => result[0]);\n    }\n\n    /**\n     * Write to an access port register\n     * @param register AP register to write\n     * @param value Value to write\n     * @returns Promise\n     */\n    public writeAP(register: APRegister, value: number): Promise<void> {\n        return this.proxy.transfer(this.writeAPCommand(register, value))\n        .then(() => undefined);\n    }\n\n    /**\n     * Read a 16-bit word from a memory access port register\n     * @param register ID of register to read\n     * @returns Promise of register data\n     */\n    public readMem16(register: number): Promise<number> {\n        return this.proxy.transfer(this.readMem16Command(register))\n        .then(result => result[0]);\n    }\n\n    /**\n     * Write a 16-bit word to a memory access port register\n     * @param register ID of register to write to\n     * @param value The value to write\n     * @returns Promise\n     */\n    public writeMem16(register: number, value: number): Promise<void> {\n        value = value as number << ((register & 0x02) << 3);\n        return this.proxy.transfer(this.writeMem16Command(register, value))\n        .then(() => undefined);\n    }\n\n    /**\n     * Read a 32-bit word from a memory access port register\n     * @param register ID of register to read\n     * @returns Promise of register data\n     */\n    public readMem32(register: number): Promise<number> {\n        return this.proxy.transfer(this.readMem32Command(register))\n        .then(result => result[0]);\n    }\n\n    /**\n     * Write a 32-bit word to a memory access port register\n     * @param register ID of register to write to\n     * @param value The value to write\n     * @returns Promise\n     */\n    public writeMem32(register: number, value: number): Promise<void> {\n        return this.proxy.transfer(this.writeMem32Command(register, value))\n        .then(() => undefined);\n    }\n\n    /**\n     * Read a block of 32-bit words from a memory access port register\n     * @param register ID of register to read from\n     * @param count The count of values to read\n     * @returns Promise of register data\n     */\n    public readBlock(register: number, count: number): Promise<Uint32Array> {\n        let chain: Promise<Uint32Array[]> = this.transferSequence([\n            this.writeAPCommand(APRegister.CSW, CSWMask.VALUE | CSWMask.SIZE_32),\n            this.writeAPCommand(APRegister.TAR, register),\n        ])\n        .then(() => []);\n\n        // Split into requests no longer than block size\n        let remainder = count;\n        while (remainder > 0) {\n            const chunkSize = Math.min(remainder, this.proxy.blockSize);\n            chain = chain.then(results => this.proxy.transferBlock(DAPPort.ACCESS, APRegister.DRW, chunkSize)\n            .then(result => [...results, result]));\n            remainder -= chunkSize;\n        }\n\n        return chain\n        .then(arrays => this.concatTypedArray(arrays));\n    }\n\n    /**\n     * Write a block of 32-bit words to a memory access port register\n     * @param register ID of register to write to\n     * @param values The values to write\n     * @returns Promise\n     */\n    public writeBlock(register: number, values: Uint32Array): Promise<void> {\n        let chain: Promise<void> = this.transferSequence([\n            this.writeAPCommand(APRegister.CSW, CSWMask.VALUE | CSWMask.SIZE_32),\n            this.writeAPCommand(APRegister.TAR, register),\n        ])\n        .then(() => undefined);\n\n        // Split values into chunks no longer than block size\n        let index = 0;\n        while (index < values.length) {\n            const chunk = values.slice(index, index + this.proxy.blockSize);\n            chain = chain.then(() => this.proxy.transferBlock(DAPPort.ACCESS, APRegister.DRW, chunk));\n            index += this.proxy.blockSize;\n        }\n\n        return chain;\n    }\n}\n","/*\n* DAPjs\n* Copyright Arm Limited 2018\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { ADI } from \"../dap\";\nimport {\n    DebugRegister,\n    CoreRegister,\n    DhcsrMask,\n    DfsrMask,\n    DcrsrMask,\n    CoreState\n} from \"./enums\";\nimport { Processor } from \"./\";\nimport { DAPOperation } from \"../proxy\";\n\n/**\n * @hidden\n */\nconst EXECUTE_TIMEOUT = 10000;\n/**\n * @hidden\n */\nconst BKPT_INSTRUCTION = 0xBE2A;\n/**\n * @hidden\n */\nconst GENERAL_REGISTER_COUNT = 12;\n\n/**\n * Cortex M class\n */\nexport class CortexM extends ADI implements Processor {\n\n    private enableDebug() {\n        return this.writeMem32(DebugRegister.DHCSR, DhcsrMask.DBGKEY | DhcsrMask.C_DEBUGEN);\n    }\n\n    protected readCoreRegisterCommand(register: number): DAPOperation[] {\n        return this.writeMem32Command(DebugRegister.DCRSR, register)\n        .concat(this.readMem32Command(DebugRegister.DHCSR))\n        .concat(this.readMem32Command(DebugRegister.DCRDR));\n    }\n\n    protected writeCoreRegisterCommand(register: number, value: number): DAPOperation[] {\n        return this.writeMem32Command(DebugRegister.DCRDR, value)\n        .concat(this.writeMem32Command(DebugRegister.DCRSR, register | DcrsrMask.REGWnR));\n    }\n\n    /**\n     * Get the state of the processor core\n     * @returns Promise of CoreState\n     */\n    public getState(): Promise<CoreState> {\n        return this.readMem32(DebugRegister.DHCSR)\n        .then(dhcsr => {\n            let state: CoreState;\n\n            if (dhcsr & DhcsrMask.S_LOCKUP) state = CoreState.LOCKUP;\n            else if (dhcsr & DhcsrMask.S_SLEEP) state = CoreState.SLEEPING;\n            else if (dhcsr & DhcsrMask.S_HALT) state = CoreState.DEBUG;\n            else state = CoreState.RUNNING;\n\n            if (dhcsr & DhcsrMask.S_RESET_ST) {\n                // The core has been reset, check if an instruction has run\n                return this.readMem32(DebugRegister.DHCSR)\n                .then(newDhcsr => {\n                    if (newDhcsr & DhcsrMask.S_RESET_ST && !(newDhcsr & DhcsrMask.S_RETIRE_ST)) {\n                        return CoreState.RESET;\n                    } else {\n                        return state;\n                    }\n                });\n            } else {\n                return state;\n            }\n        });\n    }\n\n    /**\n     * Whether the target is halted\n     * @returns Promise of halted state\n     */\n    public isHalted(): Promise<boolean> {\n        return this.readMem32(DebugRegister.DHCSR)\n        .then(dhcsr => {\n            return !!(dhcsr & DhcsrMask.S_HALT);\n        });\n    }\n\n    /**\n     * Halt the target\n     * @param wait Wait until halted before returning\n     * @param timeout Milliseconds to wait before aborting wait\n     * @returns Promise\n     */\n    public halt(wait: boolean = true, timeout: number = 0): Promise<void> {\n        return this.isHalted()\n        .then(halted => {\n            if (halted) return Promise.resolve();\n\n            return this.writeMem32(DebugRegister.DHCSR, DhcsrMask.DBGKEY | DhcsrMask.C_DEBUGEN | DhcsrMask.C_HALT)\n            .then(() => {\n                if (!wait) return Promise.resolve();\n\n                return this.waitDelay(() => this.isHalted(), 100, timeout);\n            });\n        });\n    }\n\n    /**\n     * Resume a target\n     * @param wait Wait until resumed before returning\n     * @param timeout Milliseconds to wait before aborting wait\n     * @returns Promise\n     */\n    public resume(wait: boolean = true, timeout: number = 0) {\n        return this.isHalted()\n        .then(halted => {\n            if (!halted) return Promise.resolve();\n\n            return this.writeMem32(DebugRegister.DFSR, DfsrMask.DWTTRAP | DfsrMask.BKPT | DfsrMask.HALTED)\n            .then(() => this.enableDebug())\n            .then(() => {\n                if (!wait) return Promise.resolve();\n\n                return this.waitDelay(() => this.isHalted().then(result => !result), 100, timeout);\n            });\n        });\n    }\n\n    /**\n     * Read from a core register\n     * @param register The register to read\n     * @returns Promise of value\n     */\n    public readCoreRegister(register: CoreRegister): Promise<number> {\n        return this.transferSequence([\n            this.writeMem32Command(DebugRegister.DCRSR, register),\n            this.readMem32Command(DebugRegister.DHCSR)\n        ])\n        .then(results => {\n            const dhcsr = results[0];\n            if (!(dhcsr & DhcsrMask.S_REGRDY)) {\n                throw new Error(\"Register not ready\");\n            }\n\n            return this.readMem32(DebugRegister.DCRDR);\n        });\n    }\n\n    /**\n     * Read an array of core registers\n     * @param registers The registers to read\n     * @returns Promise of register values in an array\n     */\n    public readCoreRegisters(registers: CoreRegister[]): Promise<number[]> {\n        let chain: Promise<number[]> = Promise.resolve([]);\n\n        registers.forEach(register => {\n            chain = chain.then(results => this.readCoreRegister(register).then(result => [...results, result]));\n        });\n\n        return chain;\n    }\n\n    /**\n     * Write to a core register\n     * @param register The register to write to\n     * @param value The value to write\n     * @returns Promise\n     */\n    public writeCoreRegister(register: CoreRegister, value: number): Promise<void> {\n        return this.transferSequence([\n            this.writeMem32Command(DebugRegister.DCRDR, value),\n            this.writeMem32Command(DebugRegister.DCRSR, register | DcrsrMask.REGWnR),\n            this.readMem32Command(DebugRegister.DHCSR)\n        ])\n        .then(results => {\n            const dhcsr = results[0];\n            if (!(dhcsr & DhcsrMask.S_REGRDY)) {\n                throw new Error(\"Register not ready\");\n            }\n        });\n    }\n\n    /**\n     * Exucute code at a specified memory address\n     * @param address The address to put the code\n     * @param code The code to use\n     * @param stackPointer The stack pointer to use\n     * @param programCounter The program counter to use\n     * @param linkRegister The link register to use (defaults to address + 1)\n     * @param registers Values to add to the general purpose registers, R0, R1, R2, etc.\n     */\n    public execute(address: number, code: Uint32Array, stackPointer: number, programCounter: number, linkRegister: number = address + 1, ...registers: number[]): Promise<void> {\n\n        // Ensure a breakpoint exists at the end of the code\n        if (code[code.length - 1] !== BKPT_INSTRUCTION) {\n            const newCode = new Uint32Array(code.length + 1);\n            newCode.set(code);\n            newCode.set([BKPT_INSTRUCTION], code.length - 1);\n            code = newCode;\n        }\n\n        // Create sequence of core register writes\n        const sequence = [\n            this.writeCoreRegisterCommand(CoreRegister.SP, stackPointer),\n            this.writeCoreRegisterCommand(CoreRegister.PC, programCounter),\n            this.writeCoreRegisterCommand(CoreRegister.LR, linkRegister)\n        ];\n\n        // Add in register values R0, R1, R2, etc.\n        for (let i = 0; i < Math.min(registers.length, GENERAL_REGISTER_COUNT); i++) {\n            sequence.push(this.writeCoreRegisterCommand(i, registers[i]));\n        }\n\n        return this.halt() // Halt the target\n        .then(() => this.transferSequence(sequence)) // Write the registers\n        .then(() => this.writeBlock(address, code)) // Write the code to the address\n        .then(() => this.resume(false)) // Resume the target, without waiting\n        .then(() => this.waitDelay(() => this.isHalted(), 100, EXECUTE_TIMEOUT)); // Wait for the target to halt on the breakpoint\n    }\n}\n","/*\n* DAPjs\n* Copyright Arm Limited 2018\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { platform } from \"os\";\nimport type { HID as nodeHID, Device } from \"node-hid\";\nimport { Transport } from \"./\";\n\n/**\n * HID Transport class\n */\nexport class HID implements Transport {\n\n    private os: string = platform();\n    private path: string;\n    private device?: nodeHID;\n    public readonly packetSize = 64;\n\n    /**\n     * HID constructor\n     * @param path Path to HID device to use\n     */\n    constructor(deviceOrPath: Device | string) {\n        function isDevice(source: Device | string): source is Device {\n            return (source as Device).path !== undefined;\n        }\n\n        this.path = isDevice(deviceOrPath) ? deviceOrPath.path! : deviceOrPath;\n    }\n\n    /**\n     * Open device\n     * @returns Promise\n     */\n    public open(): Promise<void> {\n        return new Promise((resolve, reject) => {\n            if (!this.path.length) {\n                return reject(\"No path specified\");\n            }\n\n            try {\n                const hid = require(\"node-hid\");\n                this.device = new hid.HID(this.path);\n                resolve();\n            } catch (ex) {\n                reject(ex);\n            }\n        });\n    }\n\n    /**\n     * Close device\n     * @returns Promise\n     */\n    public close(): Promise<void> {\n        return new Promise((resolve, _reject) => {\n            if (this.device) {\n                this.device.close();\n            }\n\n            resolve();\n        });\n    }\n\n    /**\n     * Read from device\n     * @returns Promise of DataView\n     */\n    public read(): Promise<DataView> {\n        return new Promise((resolve, reject) => {\n            if (!this.device) return reject(\"No device opened\");\n\n            this.device.read((error: string, data: number[]) => {\n                if (error) {\n                    return reject(error);\n                }\n\n                const buffer = new Uint8Array(data).buffer;\n                resolve(new DataView(buffer));\n            });\n        });\n    }\n\n    /**\n     * Write to device\n     * @param data Data to write\n     * @returns Promise\n     */\n    public write(data: BufferSource): Promise<void> {\n        return new Promise((resolve, reject) => {\n            if (!this.device) return reject(\"No device opened\");\n\n            function isView(source: ArrayBuffer | ArrayBufferView): source is ArrayBufferView {\n                return (source as ArrayBufferView).buffer !== undefined;\n            }\n\n            const arrayBuffer = isView(data) ? data.buffer : data;\n            const array = Array.prototype.slice.call(new Uint8Array(arrayBuffer));\n\n            // Pad to packet size\n            while (array.length < this.packetSize) array.push(0);\n\n            // Windows requires the prepend of an extra byte\n            // https://github.com/node-hid/node-hid/blob/master/README.md#prepend-byte-to-hid_write\n            if (this.os === \"win32\") {\n                array.unshift(0);  // prepend throwaway byte\n            }\n\n            const bytesWritten = this.device.write(array);\n            if (bytesWritten !== array.length) return reject(\"Incorrect bytecount written\");\n\n            resolve();\n        });\n    }\n}\n","/*\nThe MIT License (MIT)\n\nCopyright (c) 2016 CoderPuppy\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n*/\nvar _endianness;\nexport function endianness() {\n  if (typeof _endianness === 'undefined') {\n    var a = new ArrayBuffer(2);\n    var b = new Uint8Array(a);\n    var c = new Uint16Array(a);\n    b[0] = 1;\n    b[1] = 2;\n    if (c[0] === 258) {\n      _endianness = 'BE';\n    } else if (c[0] === 513){\n      _endianness = 'LE';\n    } else {\n      throw new Error('unable to figure out endianess');\n    }\n  }\n  return _endianness;\n}\n\nexport function hostname() {\n  if (typeof global.location !== 'undefined') {\n    return global.location.hostname\n  } else return '';\n}\n\nexport function loadavg() {\n  return [];\n}\n\nexport function uptime() {\n  return 0;\n}\n\nexport function freemem() {\n  return Number.MAX_VALUE;\n}\n\nexport function totalmem() {\n  return Number.MAX_VALUE;\n}\n\nexport function cpus() {\n  return [];\n}\n\nexport function type() {\n  return 'Browser';\n}\n\nexport function release () {\n  if (typeof global.navigator !== 'undefined') {\n    return global.navigator.appVersion;\n  }\n  return '';\n}\n\nexport function networkInterfaces(){}\nexport function getNetworkInterfaces(){}\n\nexport function arch() {\n  return 'javascript';\n}\n\nexport function platform() {\n  return 'browser';\n}\n\nexport function tmpDir() {\n  return '/tmp';\n}\nexport var tmpdir = tmpDir;\n\nexport var EOL = '\\n';\nexport default {\n  EOL: EOL,\n  tmpdir: tmpdir,\n  tmpDir: tmpDir,\n  networkInterfaces:networkInterfaces,\n  getNetworkInterfaces: getNetworkInterfaces,\n  release: release,\n  type: type,\n  cpus: cpus,\n  totalmem: totalmem,\n  freemem: freemem,\n  uptime: uptime,\n  loadavg: loadavg,\n  hostname: hostname,\n  endianness: endianness,\n}\n","/*\n* DAPjs\n* Copyright Arm Limited 2018\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport type { Device, InEndpoint, OutEndpoint} from \"usb\";\nimport { Transport } from \"./\";\n\n/**\n * @hidden\n */\nconst LIBUSB_REQUEST_TYPE_CLASS = (0x01 << 5);\n/**\n * @hidden\n */\nconst LIBUSB_RECIPIENT_INTERFACE = 0x01;\n/**\n * @hidden\n */\nconst LIBUSB_ENDPOINT_OUT = 0x00;\n/**\n * @hidden\n */\nconst LIBUSB_ENDPOINT_IN = 0x80;\n/**\n * @hidden\n */\nconst DEFAULT_CONFIGURATION = 1;\n/**\n * @hidden\n */\nconst DEFAULT_CLASS = 0xFF;\n\n/**\n * @hidden\n */\nconst GET_REPORT = 0x01;\n/**\n * @hidden\n */\nconst SET_REPORT = 0x09;\n/**\n * @hidden\n */\nconst OUT_REPORT = 0x200;\n/**\n * @hidden\n */\nconst IN_REPORT = 0x100;\n\n/**\n * USB Transport class\n */\nexport class USB implements Transport {\n\n    private interfaceNumber?: number;\n    private endpointIn?: InEndpoint;\n    private endpointOut?: OutEndpoint;\n    public readonly packetSize = 64;\n\n    /**\n     * USB constructor\n     * @param device USB device to use\n     * @param interfaceClass Optional interface class to use (default: 0xFF)\n     * @param configuration Optional Configuration to use (default: 1)\n     * @param alwaysControlTransfer Whether to always use control transfer instead of endpoints (default: false)\n     */\n    constructor(private device: Device, private interfaceClass = DEFAULT_CLASS, private configuration = DEFAULT_CONFIGURATION, private alwaysControlTransfer: boolean = false) {\n    }\n\n    private bufferToDataView(buffer: Buffer): DataView {\n        const arrayBuffer = new Uint8Array(buffer).buffer;\n        return new DataView(arrayBuffer);\n    }\n\n    private bufferSourceToBuffer(bufferSource: ArrayBuffer | ArrayBufferView): Buffer {\n        function isView(source: ArrayBuffer | ArrayBufferView): source is ArrayBufferView {\n            return (source as ArrayBufferView).buffer !== undefined;\n        }\n\n        const arrayBuffer = isView(bufferSource) ? bufferSource.buffer : bufferSource;\n        return Buffer.from(arrayBuffer);\n    }\n\n    private extendBuffer(data: BufferSource, packetSize: number): BufferSource {\n        function isView(source: ArrayBuffer | ArrayBufferView): source is ArrayBufferView {\n            return (source as ArrayBufferView).buffer !== undefined;\n        }\n\n        const arrayBuffer = isView(data) ? data.buffer : data;\n        const length = Math.min(arrayBuffer.byteLength, packetSize);\n\n        const result = new Uint8Array(length);\n        result.set(new Uint8Array(arrayBuffer));\n\n        return result;\n    }\n\n    /**\n     * Open device\n     * @returns Promise\n     */\n    public open(): Promise<void> {\n        return new Promise((resolve, reject) => {\n            this.device.open();\n            this.device.setConfiguration(this.configuration, error => {\n                if (error) return reject(error);\n                const interfaces = this.device.interfaces.filter(iface => {\n                    return iface.descriptor.bInterfaceClass === this.interfaceClass;\n                });\n\n                if (!interfaces.length) {\n                    throw new Error(\"No valid interfaces found.\");\n                }\n\n                // Prefer interface with endpoints\n                let selectedInterface = interfaces.find(iface => iface.endpoints.length > 0);\n\n                // Otherwise use the first\n                if (!selectedInterface) {\n                    selectedInterface = interfaces[0];\n                }\n\n                this.interfaceNumber = selectedInterface.interfaceNumber;\n\n                // If we always want to use control transfer, don't find/set endpoints and claim interface\n                if (!this.alwaysControlTransfer) {\n                    const endpoints = selectedInterface.endpoints;\n\n                    this.endpointIn = undefined;\n                    this.endpointOut = undefined;\n\n                    for (const endpoint of endpoints) {\n                        if (endpoint.direction === \"in\") this.endpointIn = (endpoint as InEndpoint);\n                        else this.endpointOut = (endpoint as OutEndpoint);\n                    }\n\n                    // If endpoints are found, claim the interface\n                    if (this.endpointIn || this.endpointOut) {\n\n                        // If the interface can't be claimed, use control transfer\n                        try {\n                            selectedInterface.claim();\n                        } catch (_e) {\n                            this.endpointIn = undefined;\n                            this.endpointOut = undefined;\n                        }\n                    }\n                }\n\n                resolve();\n            });\n        });\n    }\n\n    /**\n     * Close device\n     * @returns Promise\n     */\n    public close(): Promise<void> {\n        return new Promise((resolve, _reject) => {\n            this.device.close();\n            resolve();\n        });\n    }\n\n    /**\n     * Read from device\n     * @returns Promise of DataView\n     */\n    public read(): Promise<DataView> {\n        return new Promise((resolve, reject) => {\n            if (this.interfaceNumber === undefined) return reject(\"No device opened\");\n\n            // Use endpoint if it exists\n            if (this.endpointIn) {\n                this.endpointIn.transfer(this.packetSize, (error, buffer) => {\n                    if (error) return reject(error);\n                    resolve(this.bufferToDataView(buffer));\n                });\n                return;\n            }\n\n            // Fallback to using control transfer\n            this.device.controlTransfer(\n                LIBUSB_ENDPOINT_IN | LIBUSB_REQUEST_TYPE_CLASS | LIBUSB_RECIPIENT_INTERFACE,\n                GET_REPORT,\n                IN_REPORT,\n                this.interfaceNumber,\n                this.packetSize,\n                (error, buffer) => {\n                    if (error) return reject(error);\n                    if (!buffer) return reject(\"No buffer read\");\n                    resolve(this.bufferToDataView(buffer));\n                }\n            );\n        });\n    }\n\n    /**\n     * Write to device\n     * @param data Data to write\n     * @returns Promise\n     */\n    public write(data: BufferSource): Promise<void> {\n        const extended = this.extendBuffer(data, this.packetSize);\n        const buffer = this.bufferSourceToBuffer(extended);\n\n        return new Promise((resolve, reject) => {\n            if (this.interfaceNumber === undefined) return reject(\"No device opened\");\n\n            // Use endpoint if it exists\n            if (this.endpointOut) {\n                this.endpointOut.transfer(buffer, error => {\n                    if (error) return reject(error);\n                    resolve();\n                });\n                return;\n            }\n\n            // Fallback to using control transfer\n            this.device.controlTransfer(\n                LIBUSB_ENDPOINT_OUT | LIBUSB_REQUEST_TYPE_CLASS | LIBUSB_RECIPIENT_INTERFACE,\n                SET_REPORT,\n                OUT_REPORT,\n                this.interfaceNumber,\n                buffer,\n                error => {\n                    if (error) return reject(error);\n                    resolve();\n                }\n            );\n        });\n    }\n}\n","/*\n* DAPjs\n* Copyright Arm Limited 2018\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { Transport } from \"./\";\n\n/**\n * @hidden\n */\nconst DEFAULT_CONFIGURATION = 1;\n/**\n * @hidden\n */\nconst DEFAULT_CLASS = 0xFF;\n\n/**\n * @hidden\n */\nconst GET_REPORT = 0x01;\n/**\n * @hidden\n */\nconst SET_REPORT = 0x09;\n/**\n * @hidden\n */\nconst OUT_REPORT = 0x200;\n/**\n * @hidden\n */\nconst IN_REPORT = 0x100;\n\n/**\n * WebUSB Transport class\n * https://wicg.github.io/webusb/\n */\nexport class WebUSB implements Transport {\n\n    private interfaceNumber?: number;\n    private endpointIn?: USBEndpoint;\n    private endpointOut?: USBEndpoint;\n    public readonly packetSize = 64;\n\n    /**\n     * WebUSB constructor\n     * @param device WebUSB device to use\n     * @param interfaceClass Optional interface class to use (default: 0xFF)\n     * @param configuration Optional Configuration to use (default: 1)\n     * @param alwaysControlTransfer Whether to always use control transfer instead of endpoints (default: false)\n     */\n    constructor(private device: USBDevice, private interfaceClass = DEFAULT_CLASS, private configuration = DEFAULT_CONFIGURATION, private alwaysControlTransfer: boolean = false) {\n    }\n\n    private extendBuffer(data: BufferSource, packetSize: number): BufferSource {\n        function isView(source: ArrayBuffer | ArrayBufferView): source is ArrayBufferView {\n            return (source as ArrayBufferView).buffer !== undefined;\n        }\n\n        const arrayBuffer = isView(data) ? data.buffer : data;\n        const length = Math.min(arrayBuffer.byteLength, packetSize);\n\n        const result = new Uint8Array(length);\n        result.set(new Uint8Array(arrayBuffer));\n\n        return result;\n    }\n\n    /**\n     * Open device\n     * @returns Promise\n     */\n    public open(): Promise<void> {\n        return this.device.open()\n        .then(() => this.device.selectConfiguration(this.configuration))\n        .then(() => {\n            const interfaces = this.device.configuration!.interfaces.filter(iface => {\n                return iface.alternates[0].interfaceClass === this.interfaceClass;\n            });\n\n            if (!interfaces.length) {\n                throw new Error(\"No valid interfaces found.\");\n            }\n\n            // Prefer interface with endpoints\n            let selectedInterface = interfaces.find(iface => iface.alternates[0].endpoints.length > 0);\n\n            // Otherwise use the first\n            if (!selectedInterface) {\n                selectedInterface = interfaces[0];\n            }\n\n            this.interfaceNumber = selectedInterface.interfaceNumber;\n\n            // If we always want to use control transfer, don't find/set endpoints and claim interface\n            if (!this.alwaysControlTransfer) {\n                const endpoints = selectedInterface.alternates[0].endpoints;\n\n                this.endpointIn = undefined;\n                this.endpointOut = undefined;\n\n                for (const endpoint of endpoints) {\n                    if (endpoint.direction === \"in\") this.endpointIn = endpoint;\n                    else this.endpointOut = endpoint;\n                }\n            }\n\n            return this.device.claimInterface(this.interfaceNumber);\n        });\n    }\n\n    /**\n     * Close device\n     * @returns Promise\n     */\n    public close(): Promise<void> {\n        return this.device.close();\n    }\n\n    /**\n     * Read from device\n     * @returns Promise of DataView\n     */\n    public read(): Promise<DataView> {\n        if (this.interfaceNumber === undefined) return Promise.reject(\"No device opened\");\n\n        // Use endpoint if it exists\n        if (this.endpointIn) {\n            return this.device.transferIn(\n                this.endpointIn.endpointNumber,\n                this.packetSize\n            )\n            .then(result => result.data!);\n        }\n\n        // Fallback to using control transfer\n        return this.device.controlTransferIn(\n            {\n                requestType: \"class\",\n                recipient: \"interface\",\n                request: GET_REPORT,\n                value: IN_REPORT,\n                index: this.interfaceNumber\n            },\n            this.packetSize\n        )\n        .then(result => result.data!);\n    }\n\n    /**\n     * Write to device\n     * @param data Data to write\n     * @returns Promise\n     */\n    public write(data: BufferSource): Promise<void> {\n        if (this.interfaceNumber === undefined) return Promise.reject(\"No device opened\");\n\n        const buffer = this.extendBuffer(data, this.packetSize);\n\n        // Use endpoint if it exists\n        if (this.endpointOut) {\n            return this.device.transferOut(\n                this.endpointOut.endpointNumber,\n                buffer\n            )\n            .then(() => undefined);\n        }\n\n        // Fallback to using control transfer\n        return this.device.controlTransferOut(\n            {\n                requestType: \"class\",\n                recipient: \"interface\",\n                request: SET_REPORT,\n                value: OUT_REPORT,\n                index: this.interfaceNumber\n            },\n            buffer\n        )\n        .then(() => undefined);\n    }\n}\n"],"names":["EventHandlers","EventEmitter","init","call","this","$getMaxListeners","that","undefined","_maxListeners","defaultMaxListeners","emitNone","handler","isFn","self","len","length","listeners","arrayClone","i","emitOne","arg1","emitTwo","arg2","emitThree","arg3","emitMany","args","apply","_addListener","target","type","listener","prepend","m","events","existing","e","TypeError","_events","newListener","emit","_eventsCount","unshift","push","warned","w","Error","name","emitter","count","console","warn","log","_onceWrap","fired","g","removeListener","arguments","listenerCount","evlistener","arr","copy","Array","prototype","Object","create","usingDomains","domain","active","getPrototypeOf","setMaxListeners","n","isNaN","getMaxListeners","er","doError","error","err","context","domainEmitter","domainThrown","addListener","on","prependListener","once","prependOnceListener","list","position","originalListener","index","k","pop","spliceOne","removeAllListeners","key","keys","ret","unwrapListeners","eventNames","Reflect","ownKeys","FPBCtrlMask","DEFAULT_CLOCK_FREQUENCY","transport","mode","clockFrequency","_super","_this","blockSize","packetSize","operationSpace","operationCount","Math","floor","__extends","CmsisDAP","timeout","Promise","resolve","_reject","setTimeout","prefix","data","Uint8Array","arrayBuffer","buffer","result","byteLength","set","protocol","sequence","swjSequence","then","Uint16Array","command","array","bufferSourceToUint8Array","write","read","response","getUint8","request","send","getUint16","getUint32","ascii","slice","String","fromCharCode","bitLength","idleCycles","waitRetry","matchRetry","view","DataView","setUint8","setUint16","connected","open","Uint32Array","configureTransfer","selectProtocol","close","disconnect","delay","connect","portOrOps","register","value","operations","port","forEach","operation","offset","setUint32","countOrValues","dataSize","PARTIAL_CHAR_TEST","DOUBLE_BYTE_REPLACE","TextDecoder","input","numberArray","fromCodePoint","partialChar","match","length_1","replace","decoderReplacer","encoded","codePoint","codePointAt","leadingOnes","clz32","endPos","stringLen","decoder","event","DAPLink","EVENT_SERIAL_DATA","serialListeners","bufferString","charCode","charCodeAt","pageSize","end","min","page","EVENT_PROGRESS","writeBuffer","streamType","isBufferBinary","reject","baudrate","arrayData","split","map","serialData","dataLength","serialDelay","autoConnect","serialPolling","connectedState","_a","serialRead","decode","transportOrDap","proxy","ADI","fn","timer","running","chain","condition","arrays","arrays_1","_i","j","selectedAddress","address","writeDPCommand","concat","cswValue","writeAPCommand","readAPCommand","merged","splice","this_1","results","transfer","concatTypedArray","readDP","transferSequence","waitDelay","status","reset","readDPCommand","readMem16Command","writeMem16Command","readMem32Command","writeMem32Command","remainder","chunkSize","this_2","transferBlock","values","chunk","this_3","CortexM","writeMem32","readMem32","dhcsr","state","newDhcsr","wait","isHalted","halted","enableDebug","registers","readCoreRegister","code","stackPointer","programCounter","linkRegister","newCode","writeCoreRegisterCommand","halt","writeBlock","resume","deviceOrPath","path","HID","hid","require","device","ex","os","interfaceClass","configuration","alwaysControlTransfer","USB","bufferSource","Buffer","from","setConfiguration","interfaces","filter","iface","descriptor","bInterfaceClass","selectedInterface","find","endpoints","interfaceNumber","endpointIn","endpointOut","endpoints_1","endpoint","direction","claim","_e","bufferToDataView","controlTransfer","LIBUSB_ENDPOINT_IN","extended","extendBuffer","bufferSourceToBuffer","LIBUSB_ENDPOINT_OUT","WebUSB","selectConfiguration","alternates","claimInterface","transferIn","endpointNumber","controlTransferIn","requestType","recipient","transferOut","controlTransferOut"],"mappings":"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"}